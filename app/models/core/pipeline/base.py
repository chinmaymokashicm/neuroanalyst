from pathlib import Path, PosixPath
from typing import Optional, Any
import json

from pydantic import BaseModel, DirectoryPath, FilePath, Field, field_validator
from rich.progress import track

class GeneratedBy(BaseModel):
    Name: str = Field(title="Name", description="Name of the software used to generate the dataset")
    Version: Optional[str] = Field(title="Version", description="Version of the software used to generate the dataset")
    Description: Optional[str] = Field(title="Description", description="Description of the software used to generate the dataset")
    CodeURL: Optional[str] = Field(title="Code URL", description="URL to the code used to generate the dataset")
    Container: Optional[dict[str, str]] = Field(title="Container", description="Container information", default={})

class DatasetDescription(BaseModel):
    """
    Dataset description.
    """
    Name: str = Field(title="Name", description="Name of the dataset")
    BIDSVersion: str = Field(title="BIDS version", description="BIDS version", default="0.0.0")
    HEDVersion: Optional[str | list[str]] = Field(title="HED version", description="HED version", default="")
    DatasetLinks: Optional[str] = Field(title="Dataset links", description="Links to the dataset", default="")
    DatasetType: Optional[str] = Field(title="Dataset type", description="Type of the dataset", default="raw")
    License: Optional[str] = Field(title="License", description="License information", default="CC0")
    Authors: Optional[list[str]] = Field(title="Authors", description="Authors", default=[])
    Acknowledgements: Optional[str] = Field(title="Acknowledgements", description="Acknowledgements", default="")
    HowToAcknowledge: Optional[str] = Field(title="How to acknowledge", description="How to acknowledge the dataset", default="")
    Funding: Optional[list[str]] = Field(title="Funding", description="Funding information", default=[])
    EthicsApprovals: Optional[list[str]] = Field(title="Ethics approvals", description="Ethics approvals", default=[])
    ReferencesAndLinks: Optional[list[str]] = Field(title="References and links", description="References and links", default=[])
    DatasetDOI: Optional[str] = Field(title="Dataset DOI", description="Dataset DOI", default="")
    GeneratedBy: Optional[list[Any]] = Field(title="Generated by", description="Generated by.", default=[
        GeneratedBy(Name="BIDS Pipeline", Version="0.0.1", Description="BIDS Pipeline", CodeURL="")
    ])
    SourceDatasets: Optional[list[dict[str, str]]] = Field(title="Source datasets", description="Source datasets", default=[])
    
    @field_validator("GeneratedBy", mode="before")
    def set_GeneratedBy(cls, v):
        if isinstance(v, dict):
            return [GeneratedBy(**v)]
        elif isinstance(v, list):
            return [GeneratedBy(**item) for item in v]
        return v
    
    @classmethod
    def from_file(cls, path: str) -> "DatasetDescription":
        """
        Load dataset description from a JSON file.
        """
        with open(path, "r") as f:
            data: dict = json.load(f)
        return cls(**data)
    
def update_participants_json(participants_dict: Optional[dict], overwrite: bool = False, **kwargs) -> dict[str, Any]:
    """
    Add/update participants.json information.
    """
    default_participants_dict: dict[str, Any] = {
        "age": {
            "Description": "age of the participant",
            "Units": "year"
        },
        "sex": {
            "Description": "sex of the participant as reported by the participant",
            "Levels": {
                "M": "male",
                "F": "female"
            }
        },
        "handedness": {
            "Description": "handedness of the participant as reported by the participant",
            "Levels": {
                "left": "left",
                "right": "right"
            }
        },
        "group": {
            "Description": "experimental group the participant belonged to",
            "Levels": {
                "read": "participants who read an inspirational text before the experiment",
                "write": "participants who wrote an inspirational text before the experiment"
            }
        }
    }
    if participants_dict is None:
        participants_dict = default_participants_dict
    
    for key, value in kwargs.items():
        if overwrite or key not in participants_dict:
            participants_dict[key] = value
    return participants_dict

class BIDSPipelineTree(BaseModel):
    """
    BIDS pipeline tree. Define the structure of the pipeline dataset.
    """
    dataset_description: Optional[DatasetDescription] = Field(title="Dataset description", description="Dataset description", default=None)
    readme_text: Optional[str] = Field(title="Readme text", description="Readme text", default=None)
    citation_text: Optional[str] = Field(title="Citation text", description="Citation text", default=None)
    changes_text: Optional[str] = Field(title="Changes text", description="Changes text", default=None)
    license_text: Optional[str] = Field(title="License text", description="License text", default=None)
            
    @classmethod
    def from_path(cls, dirpath: str | DirectoryPath) -> "BIDSPipelineTree":
        """
        Load pipeline tree from a directory.
        """
        dirpath: PosixPath = Path(dirpath)
        dataset_description: DatasetDescription = DatasetDescription.from_file(dirpath / "dataset_description.json")
        with open(dirpath / "README", "r") as f:
            readme_text: str = f.read()
        with open(dirpath / "CITATION", "r") as f:
            citation_text: str = f.read()
        with open(dirpath / "CHANGES", "r") as f:
            changes_text: str = f.read()
        with open(dirpath / "LICENSE", "r") as f:
            license_text: str = f.read()
        return cls(
            dataset_description=dataset_description,
            readme_text=readme_text,
            citation_text=citation_text,
            changes_text=changes_text,
            license_text=license_text
        )
    
    def to_dict(self) -> dict:
        """
        Convert the pipeline tree to a dictionary.
        """
        return {
            "dataset_description": self.dataset_description.model_dump(mode="json"),
            "readme_text": self.readme_text,
            "citation_text": self.citation_text,
            "changes_text": self.changes_text,
            "license_text": self.license_text
        }
    
    def set_default_values(self, name: str):
        if not self.dataset_description:
            self.dataset_description = DatasetDescription(Name=name)
        if not self.readme_text:
            self.readme_text = f"# {name} Pipeline\n\n"
        if not self.citation_text:
            self.citation_text = f"# {name}\n\n"
        if not self.changes_text:
            self.changes_text = f"# {name}\n\n"
        if not self.license_text:
            self.license_text = f"# {name}\n\n"